// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thunders.TechTest.ApiService.Data;

#nullable disable

namespace Thunders.TechTest.ApiService.Data.Migrations
{
    [DbContext(typeof(TollDbContext))]
    [Migration("20250513232630_AddReport")]
    partial class AddReport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Reports.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("BlobFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeOnly?>("ElapsedExecution")
                        .HasColumnType("time");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FormatType")
                        .HasColumnType("int");

                    b.Property<string>("JsonResultData")
                        .HasColumnType("text");

                    b.Property<string>("PostbackUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Reports.ReportParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportParameter", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Tolls.TollConcessionaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LegalDocument")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nchar(14)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("TollConcessionaire", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Tolls.TollPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlazaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Vehicle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlazaId");

                    b.ToTable("TollPayment", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Tolls.TollPlaza", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ConcessionaireId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Highway")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Kms")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(7, 5)
                        .HasColumnType("decimal(7,5)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(7, 5)
                        .HasColumnType("decimal(7,5)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("ConcessionaireId");

                    b.ToTable("TollPlaza", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Reports.ReportParameter", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Domain.Reports.Report", null)
                        .WithMany("Parameters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Tolls.TollPayment", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Domain.Tolls.TollPlaza", "Plaza")
                        .WithMany()
                        .HasForeignKey("PlazaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Plaza");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Tolls.TollPlaza", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Domain.Tolls.TollConcessionaire", "Concessionaire")
                        .WithMany("Plazas")
                        .HasForeignKey("ConcessionaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concessionaire");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Reports.Report", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Domain.Tolls.TollConcessionaire", b =>
                {
                    b.Navigation("Plazas");
                });
#pragma warning restore 612, 618
        }
    }
}
